import React, { useState, useRef } from "react";

import Form from "react-bootstrap/Form";
import Button from "react-bootstrap/Button";
import InputGroup from "react-bootstrap/InputGroup";
import styles from "../../styles/DocumentationCreateForm.module.css";

import { axiosReq, axiosRes } from "../../api/axiosDefaults";

function DocumentationCreateForm() {
    // new model
    const [errors, setErrors] = useState({});
    const [documentationData, setDocumentationData] = useState({
        documentation_image: "",
        documentation_paragraph: "",
    });
    const {documentation_image, documentation_paragraph} = documentationData;
    const documentationImageInput = useRef(null);

    const handleInput = (userInput) => {
        setDocumentationData({
            ...documentationData,
            [userInput.target.name]: userInput.target.value,
        });
    };

    const handleChangeDocumentationImage = (userInput) => {
        if (userInput.target.files.length){
            URL.revokeObjectURL(documentation_image);
            setDocumentationData({
                ...documentationData,
                documentation_image: URL.createObjectURL(userInput.target.files[0]),
            });
        }
    };

    const handleSubmit = async (userInput) => {
        userInput.preventDefault();
        const formData = new FormData();

        formData.append('documentation_image', documentation_image);
        formData.append('documentation_paragraph', documentationImageInput.current.files[0]);

        try {
            const {data} = await axiosReq.post('/documentations/', formData);
        } catch(err){
            console.log(err)
            if (err.response?.status !== 401) {
                setErrors(err.response?.data);
            }
        }
    };

    const textFields = (
        <div>
            <Form.Group>
                <Form.Label>Paragraph</Form.Label>
                <Form.Control
                type="text"
                placeholder=""
                name="documentation_paragraph"
                value={documentation_paragraph}
                onChange={handleInput}
                />
            </Form.Group>
            {errors?.documentation_paragraph?.map((message, idx) => (
                <Alert variant="warning" key={idx}>
                    {message}
                </Alert>
            ))}

            <Button
            className={styles.Button}
            type="submit"
            >
                Submit
            </Button>
        </div>
    )

    // prev model
/*    const { project, setProject, setDocumentations } = props;
    const [documentation_paragraph, setDocumentationParagraph] = useState("");
    // null is compatible with image
    const [documentation_image, setDocumentationImage] = useState(null);


    const handleParagraphInput = (event) => {
        setDocumentationParagraph(event.target.value);
    };

    const handleImageInput = (event) => {
        const selectedImage = event.target.files[0];
      
        if (selectedImage) {
          const cleanDocumentationImage = JSON.parse(
            JSON.stringify(setDocumentationImage, (key, value) => {
              if (key === 'documentation_image') {
                return undefined;
              }
              return value;
            })
          );
      
          // Set the new documentationImage, including the selected image
          setDocumentationImage({
            ...cleanDocumentationImage,
            documentation_image: URL.createObjectURL(selectedImage),
          });
        }
      };

    const handleSubmit = async (userInput) => {
        userInput.preventDefault();
        try {
            const { data } = await axiosRes.post('/documentations/', {
                documentation_paragraph,
//future feature                documentation_image,
                project,
            });
            setDocumentations((prevDocumentations) => ({
                ...prevDocumentations,
                results: [data, ...prevDocumentations.results],
            }));
            setProject((prevProject) => ({
                results: [
                    {
                        ...prevProject.results[0],
                    },
                ],
            }));
            setDocumentationParagraph("");
        } catch (err) {
//            console.log(err)
        }
    };
*/
    const isDocumentationEmpty = !documentation_paragraph.trim();

    return (
        <div className={styles.DocumentationCreateFormCard}>
            <p>Add documentation</p>
            <Form onSubmit={handleSubmit}>

                <Form.Group>
                    {documentation_image ? (
                        <div>
                            <p>image true</p>
                            <Form.Label
                            htmlFor="image-upload"
                            ></Form.Label>
                        </div>
                    ) : (
                        <div>
                            <p>image false</p>
                            <Form.Label
                            htmlFor="image-upload"
                            ></Form.Label>
                        </div>
                    )}
                    <Form.File
                    id="image-upload"
                    accept="image/*"
                    onChange={handleChangeDocumentationImage}
                    ref={documentationImageInput}
                    />
                    {errors?.documentation_image?.map((message, idx) => (
                        <Alert variant="warning" key={idx}>
                            {message}
                        </Alert>
                    ))}
                </Form.Group>
                <div>
                    {textFields}
                </div>

            </Form>
        </div>
    )

}

export default DocumentationCreateForm
